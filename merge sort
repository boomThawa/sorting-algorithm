# import all the modules 
import matplotlib.pyplot as plt 
from matplotlib.animation import FuncAnimation 
import matplotlib as mp 
import numpy as np 
import random 

# function to recursively divide the array 
def mergesort(A, start, end): 
    if end <= start: 
        return

    mid = start + ((end - start + 1) // 2) - 1
    
    # yield from statements have been used to yield 
    # the array from the functions 
    yield from mergesort(A, start, mid) 
    yield from mergesort(A, mid + 1, end) 
    yield from merge(A, start, mid, end) 

# function to merge the array 
def merge(A, start, mid, end): 
    merged = [] 
    leftIdx = start 
    rightIdx = mid + 1

    while leftIdx <= mid and rightIdx <= end: 
        if A[leftIdx] < A[rightIdx]: 
            merged.append(A[leftIdx]) 
            leftIdx += 1
        else: 
            merged.append(A[rightIdx]) 
            rightIdx += 1

    while leftIdx <= mid: 
        merged.append(A[leftIdx]) 
        leftIdx += 1

    while rightIdx <= end: 
        merged.append(A[rightIdx]) 
        rightIdx += 1

    for i in range(len(merged)): 
        A[start + i] = merged[i] 
        yield A 

# function to plot bars 
def showGraph(): 
    
    # for random unique values 
    n=20
    a=[i for i in range(1, n+1)] 
    random.shuffle(a) 
    datasetName='Random'
    
    # generator object returned by the function 
    generator = mergesort(a, 0, len(a)-1) 
    algoName='Merge Sort'
    
    # style of the chart 
    plt.style.use('fivethirtyeight') 
    
    # set colors of the bars 
    data_normalizer = mp.colors.Normalize() 
    color_map = mp.colors.LinearSegmentedColormap( 
        "my_map", 
        { 
            "red": [(0, 1.0, 1.0), 
                    (1.0, 1.0, 0.0)],  # Light yellow to yellow
            "green": [(0, 1.0, 1.0), 
                    (1.0, 1.0, 1.0)],  # Change to white
            "blue": [(0, 0.0, 1.0),    # Change to blue
                    (1.0, 0.0, 1.0)]     # Dark blue
        } 
    ) 

    fig, ax = plt.subplots()  
    
    # set the background color to black
    fig.set_facecolor('#000000')  
    ax.set_facecolor('#000000')  
    
    # bar container 
    bar_rects = ax.bar(range(len(a)), a, align="edge", 
                    color=color_map(data_normalizer(range(n))), edgecolor='black') 
    
    
    # Remove spines
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)
    
    # Remove gridlines
    ax.grid(False)
    
    # the text to be shown on the upper left 
    # indicating the number of iterations 
    # transform indicates the position with 
    # relevance to the axes coordinates. 
    # text = ax.text(0.01, 0.95, "", transform=ax.transAxes, 
    #             color="#E4365D")  # Commented out to remove text
    iteration = [0] 

    def animate(A, rects, iteration): 
        for rect, val in zip(rects, A): 
            
            # setting the size of each bar equal 
            # to the value of the elements 
            rect.set_height(val) 
        iteration[0] += 1
        # text.set_text("iterations : {}".format(iteration[0]))  # Commented out to remove text
    
    # call animate function repeatedly 
    anim = FuncAnimation(fig, func=animate, 
        fargs=(bar_rects, iteration), frames=generator, interval=50, 
        repeat=False) 
    plt.show() 

showGraph()
